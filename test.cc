// #pragma GCC optimize(2)

// 800000000003600000070090200050007000000045700000100030001000068008500010090000400(final target)

// #define DEBUG
// #define FUNCTION_CALL
#include "SolverCore_AIC.hpp"
#include "SolverCore_DynamicChain.hpp"
#include <iomanip>
#include <fstream>
#include <ctime>
#include "DLX.hpp"

// #define PRINT_SUDOKU

int main()
{
    int count = 0;
    int d_count = 0;
    int dynamic_count = 0;
    while (1)
    {
        DLX dlx;
        string pro(dlx.create_sudoku(30));
        // string pro("748359126001726840026400705200040087074030000180070004402007608017003402805204070");
        // string pro;
        // cout << "pro: ";
        // cin >> pro;
        Solver solver(pro);
        
        if (solver.getRight())
        {
            if (solver.getLevel() <= 7)
            {
                ++d_count;
                #ifdef PRINT_SUDOKU
                solver.printAns();
                system("pause");
                // if (solver.getLevel() >= 6 && solver.getCount().UniqueRectangle)
                if (solver.getCount().UniqueRectangle)
                {
                    solver.printAns();
                    system("pause");
                }
                #endif
            }
            else if (solver.getLevel() == 8)
            {
                ++dynamic_count;
                #ifdef PRINT_SUDOKU
                if (solver.getLevel() >= 6)
                {
                    solver.printAns();
                    system("pause");
                }
                #endif
            }
            else
            {
                solver.printAns();
                system("pause");
                #ifdef PRINT_SUDOKU
                // if (solver.getLevel() >= 6)
                {
                    solver.printAns();
                    system("pause");
                }
                #endif
            }
        }
        else
        {
            cout << "error!" << endl;
            solver.printAns();
            system("pause");
        }
        if (++count % 200 == 0)
        {
            cout << d_count << '/' << count << "   " <<  1.0 * d_count / count * 100 << "%       ";
            cout << (d_count + dynamic_count) << '/' << count << "   " <<  1.0 * (d_count + dynamic_count) / count * 100 << "%" << endl;
        }
    }
    
    system("pause");
}

// 000800400203060050070050060092480010718526943000009280020090070537248691901005000
// 500600298320008000008700053280009000940000815000800029861007502000200061432065087
// 900000002030900000054018900849070305173000609625090740402130590590002063300009204
// 009300487473080000000047039096730054730090068150062793605070340940603875387004906
// 602009040805006097947850600094385700308600000006000000561900002423510000789263400
// 004003827037280000020400050940000008016000490300004062080041030000328900403700281
// 080671009000394010901285037016037090098106703030928164100802075070019080800703041(退化三链列)
// 003416200260003104104000036046371502021840000007620410005030041002104000410567320(退化四链列)
// 016000482450260713203014659327400061060132074140076328534000096000045037000000845(孪生二链列)
// 000160870010875003807300651050621730001700504730500100070000000080256917062007000(孪生四链列)
// 006021459000053612521694300005246030007189506060537000452978163813460000679310000(XY_Wing)
// 000027948287439615000068723000745102571692834402381570700953200329816457056274300(XYZ_Wing)
// 000040601001560204006100079607010900019600007020090816532971468978436100164258793(折点残缺WXYZ_Wing)
// 080051700010027540570930002425700000708002056601500027060005000150000200847200095(折点残缺VWXYZ_Wing)
// 893000076756080304142673859580020003429036705630000002214568937368297541975314008(VWXYZ_Wing)
// 192403650578006430436000000753928146624030080819645723940000360381064290260309004(双线风筝)
// 100600930003000062069273180000817040004369800000542000051428670700000408048700001
// 005300000800000020070010500400005300010070006003200080060500009004000030000009700
// 003070050065003007070450620050000080037000000180000000000005031300701005000830274
// 967000005000600047100000000003009800205430070070000060001000000000502080700000402

// 967000005000600047100000608613009804285436070479000063021000000300502080700000402
// 008003001600200070000060204000700900060032140003001000805020010070008005900300400 (dynamic chain)
// 100000002090400050006000700050903000000074000000850040700000600030009080002000001 (dynamic chain)